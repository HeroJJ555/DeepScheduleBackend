generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum SchoolType {
  LO
  TECHNIKUM
  BRANZOWA
}

enum SchoolRole {
  ADMIN
  TEACHER
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  password  String
  name      String
  role      Role           @default(USER)
  schools   SchoolOnUser[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model School {
  id             Int             @id @default(autoincrement())
  name           String
  type           SchoolType      @default(LO)
  address        String?
  city           String?
  users          SchoolOnUser[]
  teachers       Teacher[]
  subjects       Subject[]
  classes        Class[]
  rooms          Room[]
  timeslots      TimeSlot[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  LessonSettings LessonSettings?
}

model LessonSettings {
  id                 Int      @id @default(autoincrement())
  school             School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId           Int      @unique
  lessonDuration     Int      @default(45)
  shortBreakDuration Int      @default(10)
  longBreakDuration  Int      @default(20)
  longBreakAfter     Int      @default(4)
  periodsPerDay      Int      @default(6)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model SchoolOnUser {
  user     User         @relation(fields: [userId], references: [id])
  userId   Int
  school   School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId Int
  role     SchoolRole   @default(TEACHER)
  position UserPosition @default(NAUCZYCIEL)

  @@id([userId, schoolId])
}

enum UserPosition {
  DYREKTOR
  VICE_DYREKTOR
  NAUCZYCIEL
  KIEROWNIK_IT
}

model Teacher {
  id              Int                   @id @default(autoincrement())
  name            String
  workload        Int?
  email           String?
  school          School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId        Int
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  entries         TimetableEntry[]
  teacherSubjects TeacherSubject[]
  availabilities  TeacherAvailability[]
  ClassSubject    ClassSubject[]
}

model TeacherAvailability {
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  Int
  timeslot   TimeSlot @relation(fields: [timeslotId], references: [id], onDelete: Cascade)
  timeslotId Int

  @@id([teacherId, timeslotId])
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId        Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  entries         TimetableEntry[]
  teacherSubjects TeacherSubject[]
  classSubjects   ClassSubject[]
  RoomSubject     RoomSubject[]
}

model Class {
  id            Int              @id @default(autoincrement())
  name          String
  school        School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  entries       TimetableEntry[]
  classSubjects ClassSubject[]
}

model Room {
  id              Int              @id @default(autoincrement())
  name            String
  capacity        Int?
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId        Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  entries         TimetableEntry[]
  specialSubjects RoomSubject[]
}

model RoomSubject {
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int

  @@id([roomId, subjectId])
}

model TimeSlot {
  id                  Int                   @id @default(autoincrement())
  day                 Int
  hour                Int
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId            Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  entries             TimetableEntry[]
  TeacherAvailability TeacherAvailability[]
}

model TimetableEntry {
  id         Int      @id @default(autoincrement())
  class      Class    @relation(fields: [classId], references: [id])
  classId    Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  Int
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  teacherId  Int?
  timeslot   TimeSlot @relation(fields: [timeslotId], references: [id])
  timeslotId Int
  room       Room?    @relation(fields: [roomId], references: [id])
  roomId     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ClassSubject {
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   Int
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
  extended  Boolean  @default(false)

  @@id([classId, subjectId])
}

model TeacherSubject {
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  @@id([teacherId, subjectId])
}
